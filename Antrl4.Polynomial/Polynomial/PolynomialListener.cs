//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Polynomial.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="PolynomialParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public interface IPolynomialListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by the <c>plusminus</c>
	/// labeled alternative in <see cref="PolynomialParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPlusminus([NotNull] PolynomialParser.PlusminusContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>plusminus</c>
	/// labeled alternative in <see cref="PolynomialParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPlusminus([NotNull] PolynomialParser.PlusminusContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>prod</c>
	/// labeled alternative in <see cref="PolynomialParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterProd([NotNull] PolynomialParser.ProdContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>prod</c>
	/// labeled alternative in <see cref="PolynomialParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitProd([NotNull] PolynomialParser.ProdContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>const</c>
	/// labeled alternative in <see cref="PolynomialParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConst([NotNull] PolynomialParser.ConstContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>const</c>
	/// labeled alternative in <see cref="PolynomialParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConst([NotNull] PolynomialParser.ConstContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>var</c>
	/// labeled alternative in <see cref="PolynomialParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVar([NotNull] PolynomialParser.VarContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>var</c>
	/// labeled alternative in <see cref="PolynomialParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVar([NotNull] PolynomialParser.VarContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>parenExp</c>
	/// labeled alternative in <see cref="PolynomialParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParenExp([NotNull] PolynomialParser.ParenExpContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>parenExp</c>
	/// labeled alternative in <see cref="PolynomialParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParenExp([NotNull] PolynomialParser.ParenExpContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>power</c>
	/// labeled alternative in <see cref="PolynomialParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPower([NotNull] PolynomialParser.PowerContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>power</c>
	/// labeled alternative in <see cref="PolynomialParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPower([NotNull] PolynomialParser.PowerContext context);
}
