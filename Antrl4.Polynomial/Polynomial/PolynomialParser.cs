//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Polynomial.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class PolynomialParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		CP=1, OP=2, PLUS=3, MINUS=4, PROD=5, POWER=6, NUM=7, VAR=8, WS=9;
	public const int
		RULE_expr = 0;
	public static readonly string[] ruleNames = {
		"expr"
	};

	private static readonly string[] _LiteralNames = {
		null, "')'", "'('", "'+'", "'-'", "'*'", "'^'", null, null, "' '"
	};
	private static readonly string[] _SymbolicNames = {
		null, "CP", "OP", "PLUS", "MINUS", "PROD", "POWER", "NUM", "VAR", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Polynomial.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static PolynomialParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public PolynomialParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public PolynomialParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PlusminusContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode PLUS() { return GetToken(PolynomialParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(PolynomialParser.MINUS, 0); }
		public PlusminusContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPolynomialListener typedListener = listener as IPolynomialListener;
			if (typedListener != null) typedListener.EnterPlusminus(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPolynomialListener typedListener = listener as IPolynomialListener;
			if (typedListener != null) typedListener.ExitPlusminus(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPolynomialVisitor<TResult> typedVisitor = visitor as IPolynomialVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlusminus(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ProdContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode PROD() { return GetToken(PolynomialParser.PROD, 0); }
		public ProdContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPolynomialListener typedListener = listener as IPolynomialListener;
			if (typedListener != null) typedListener.EnterProd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPolynomialListener typedListener = listener as IPolynomialListener;
			if (typedListener != null) typedListener.ExitProd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPolynomialVisitor<TResult> typedVisitor = visitor as IPolynomialVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstContext : ExprContext {
		public ITerminalNode NUM() { return GetToken(PolynomialParser.NUM, 0); }
		public ConstContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPolynomialListener typedListener = listener as IPolynomialListener;
			if (typedListener != null) typedListener.EnterConst(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPolynomialListener typedListener = listener as IPolynomialListener;
			if (typedListener != null) typedListener.ExitConst(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPolynomialVisitor<TResult> typedVisitor = visitor as IPolynomialVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConst(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VarContext : ExprContext {
		public ITerminalNode VAR() { return GetToken(PolynomialParser.VAR, 0); }
		public VarContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPolynomialListener typedListener = listener as IPolynomialListener;
			if (typedListener != null) typedListener.EnterVar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPolynomialListener typedListener = listener as IPolynomialListener;
			if (typedListener != null) typedListener.ExitVar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPolynomialVisitor<TResult> typedVisitor = visitor as IPolynomialVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVar(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenExpContext : ExprContext {
		public ITerminalNode OP() { return GetToken(PolynomialParser.OP, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode CP() { return GetToken(PolynomialParser.CP, 0); }
		public ParenExpContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPolynomialListener typedListener = listener as IPolynomialListener;
			if (typedListener != null) typedListener.EnterParenExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPolynomialListener typedListener = listener as IPolynomialListener;
			if (typedListener != null) typedListener.ExitParenExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPolynomialVisitor<TResult> typedVisitor = visitor as IPolynomialVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PowerContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode POWER() { return GetToken(PolynomialParser.POWER, 0); }
		public PowerContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IPolynomialListener typedListener = listener as IPolynomialListener;
			if (typedListener != null) typedListener.EnterPower(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPolynomialListener typedListener = listener as IPolynomialListener;
			if (typedListener != null) typedListener.ExitPower(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPolynomialVisitor<TResult> typedVisitor = visitor as IPolynomialVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPower(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 0;
		EnterRecursionRule(_localctx, 0, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 9;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OP:
				{
				_localctx = new ParenExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 3; Match(OP);
				State = 4; expr(0);
				State = 5; Match(CP);
				}
				break;
			case VAR:
				{
				_localctx = new VarContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 7; Match(VAR);
				}
				break;
			case NUM:
				{
				_localctx = new ConstContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 8; Match(NUM);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 24;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 22;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
					case 1:
						{
						_localctx = new PowerContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 11;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 12; Match(POWER);
						State = 13; expr(5);
						}
						break;
					case 2:
						{
						_localctx = new ProdContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 14;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 16;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==PROD) {
							{
							State = 15; Match(PROD);
							}
						}

						State = 18; expr(5);
						}
						break;
					case 3:
						{
						_localctx = new PlusminusContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 19;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 20;
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 21; expr(4);
						}
						break;
					}
					} 
				}
				State = 26;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 0: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 5);
		case 1: return Precpred(Context, 4);
		case 2: return Precpred(Context, 3);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\v', '\x1E', '\x4', '\x2', '\t', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x5', '\x2', '\f', '\n', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x5', '\x2', '\x13', '\n', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\a', '\x2', 
		'\x19', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '\x1C', '\v', '\x2', '\x3', 
		'\x2', '\x2', '\x3', '\x2', '\x3', '\x2', '\x2', '\x3', '\x3', '\x2', 
		'\x5', '\x6', '\x2', '\"', '\x2', '\v', '\x3', '\x2', '\x2', '\x2', '\x4', 
		'\x5', '\b', '\x2', '\x1', '\x2', '\x5', '\x6', '\a', '\x4', '\x2', '\x2', 
		'\x6', '\a', '\x5', '\x2', '\x2', '\x2', '\a', '\b', '\a', '\x3', '\x2', 
		'\x2', '\b', '\f', '\x3', '\x2', '\x2', '\x2', '\t', '\f', '\a', '\n', 
		'\x2', '\x2', '\n', '\f', '\a', '\t', '\x2', '\x2', '\v', '\x4', '\x3', 
		'\x2', '\x2', '\x2', '\v', '\t', '\x3', '\x2', '\x2', '\x2', '\v', '\n', 
		'\x3', '\x2', '\x2', '\x2', '\f', '\x1A', '\x3', '\x2', '\x2', '\x2', 
		'\r', '\xE', '\f', '\a', '\x2', '\x2', '\xE', '\xF', '\a', '\b', '\x2', 
		'\x2', '\xF', '\x19', '\x5', '\x2', '\x2', '\a', '\x10', '\x12', '\f', 
		'\x6', '\x2', '\x2', '\x11', '\x13', '\a', '\a', '\x2', '\x2', '\x12', 
		'\x11', '\x3', '\x2', '\x2', '\x2', '\x12', '\x13', '\x3', '\x2', '\x2', 
		'\x2', '\x13', '\x14', '\x3', '\x2', '\x2', '\x2', '\x14', '\x19', '\x5', 
		'\x2', '\x2', '\a', '\x15', '\x16', '\f', '\x5', '\x2', '\x2', '\x16', 
		'\x17', '\t', '\x2', '\x2', '\x2', '\x17', '\x19', '\x5', '\x2', '\x2', 
		'\x6', '\x18', '\r', '\x3', '\x2', '\x2', '\x2', '\x18', '\x10', '\x3', 
		'\x2', '\x2', '\x2', '\x18', '\x15', '\x3', '\x2', '\x2', '\x2', '\x19', 
		'\x1C', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x18', '\x3', '\x2', '\x2', 
		'\x2', '\x1A', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x1B', '\x3', '\x3', 
		'\x2', '\x2', '\x2', '\x1C', '\x1A', '\x3', '\x2', '\x2', '\x2', '\x6', 
		'\v', '\x12', '\x18', '\x1A',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
